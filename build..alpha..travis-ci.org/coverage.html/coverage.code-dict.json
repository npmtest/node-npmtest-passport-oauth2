{"/home/travis/build/npmtest/node-npmtest-passport-oauth2/test.js":"/* istanbul instrument in package npmtest_passport_oauth2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-passport-oauth2/lib.npmtest_passport_oauth2.js":"/* istanbul instrument in package npmtest_passport_oauth2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_passport_oauth2 = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_passport_oauth2 = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-passport-oauth2/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-passport-oauth2 && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_passport_oauth2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_passport_oauth2\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_passport_oauth2.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_passport_oauth2.rollup.js'] =\n            local.assetsDict['/assets.npmtest_passport_oauth2.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_passport_oauth2.__dirname + '/lib.npmtest_passport_oauth2.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-passport-oauth2/node_modules/passport-oauth2/lib/index.js":"// Load modules.\nvar Strategy = require('./strategy')\n  , AuthorizationError = require('./errors/authorizationerror')\n  , TokenError = require('./errors/tokenerror')\n  , InternalOAuthError = require('./errors/internaloautherror');\n\n\n// Expose Strategy.\nexports = module.exports = Strategy;\n\n// Exports.\nexports.Strategy = Strategy;\n\nexports.AuthorizationError = AuthorizationError;\nexports.TokenError = TokenError;\nexports.InternalOAuthError = InternalOAuthError;\n","/home/travis/build/npmtest/node-npmtest-passport-oauth2/node_modules/passport-oauth2/lib/strategy.js":"// Load modules.\nvar passport = require('passport-strategy')\n  , url = require('url')\n  , util = require('util')\n  , utils = require('./utils')\n  , OAuth2 = require('oauth').OAuth2\n  , NullStateStore = require('./state/null')\n  , SessionStateStore = require('./state/session')\n  , AuthorizationError = require('./errors/authorizationerror')\n  , TokenError = require('./errors/tokenerror')\n  , InternalOAuthError = require('./errors/internaloautherror');\n\n\n/**\n * Creates an instance of `OAuth2Strategy`.\n *\n * The OAuth 2.0 authentication strategy authenticates requests using the OAuth\n * 2.0 framework.\n *\n * OAuth 2.0 provides a facility for delegated authentication, whereby users can\n * authenticate using a third-party service such as Facebook.  Delegating in\n * this manner involves a sequence of events, including redirecting the user to\n * the third-party service for authorization.  Once authorization has been\n * granted, the user is redirected back to the application and an authorization\n * code can be used to obtain credentials.\n *\n * Applications must supply a `verify` callback, for which the function\n * signature is:\n *\n *     function(accessToken, refreshToken, profile, done) { ... }\n *\n * The verify callback is responsible for finding or creating the user, and\n * invoking `done` with the following arguments:\n *\n *     done(err, user, info);\n *\n * `user` should be set to `false` to indicate an authentication failure.\n * Additional `info` can optionally be passed as a third argument, typically\n * used to display informational messages.  If an exception occured, `err`\n * should be set.\n *\n * Options:\n *\n *   - `authorizationURL`  URL used to obtain an authorization grant\n *   - `tokenURL`          URL used to obtain an access token\n *   - `clientID`          identifies client to service provider\n *   - `clientSecret`      secret used to establish ownership of the client identifer\n *   - `callbackURL`       URL to which the service provider will redirect the user after obtaining authorization\n *   - `passReqToCallback` when `true`, `req` is the first argument to the verify callback (default: `false`)\n *\n * Examples:\n *\n *     passport.use(new OAuth2Strategy({\n *         authorizationURL: 'https://www.example.com/oauth2/authorize',\n *         tokenURL: 'https://www.example.com/oauth2/token',\n *         clientID: '123-456-789',\n *         clientSecret: 'shhh-its-a-secret'\n *         callbackURL: 'https://www.example.net/auth/example/callback'\n *       },\n *       function(accessToken, refreshToken, profile, done) {\n *         User.findOrCreate(..., function (err, user) {\n *           done(err, user);\n *         });\n *       }\n *     ));\n *\n * @constructor\n * @param {Object} options\n * @param {Function} verify\n * @api public\n */\nfunction OAuth2Strategy(options, verify) {\n  if (typeof options == 'function') {\n    verify = options;\n    options = undefined;\n  }\n  options = options || {};\n\n  if (!verify) { throw new TypeError('OAuth2Strategy requires a verify callback'); }\n  if (!options.authorizationURL) { throw new TypeError('OAuth2Strategy requires a authorizationURL option'); }\n  if (!options.tokenURL) { throw new TypeError('OAuth2Strategy requires a tokenURL option'); }\n  if (!options.clientID) { throw new TypeError('OAuth2Strategy requires a clientID option'); }\n\n  passport.Strategy.call(this);\n  this.name = 'oauth2';\n  this._verify = verify;\n\n  // NOTE: The _oauth2 property is considered \"protected\".  Subclasses are\n  //       allowed to use it when making protected resource requests to retrieve\n  //       the user profile.\n  this._oauth2 = new OAuth2(options.clientID,  options.clientSecret,\n      '', options.authorizationURL, options.tokenURL, options.customHeaders);\n\n  this._callbackURL = options.callbackURL;\n  this._scope = options.scope;\n  this._scopeSeparator = options.scopeSeparator || ' ';\n  this._key = options.sessionKey || ('oauth2:' + url.parse(options.authorizationURL).hostname);\n\n  if (options.store) {\n    this._stateStore = options.store;\n  } else {\n    if (options.state) {\n      this._stateStore = new SessionStateStore({ key: this._key });\n    } else {\n      this._stateStore = new NullStateStore();\n    }\n  }\n  this._trustProxy = options.proxy;\n  this._passReqToCallback = options.passReqToCallback;\n  this._skipUserProfile = (options.skipUserProfile === undefined) ? false : options.skipUserProfile;\n}\n\n// Inherit from `passport.Strategy`.\nutil.inherits(OAuth2Strategy, passport.Strategy);\n\n\n/**\n * Authenticate request by delegating to a service provider using OAuth 2.0.\n *\n * @param {Object} req\n * @api protected\n */\nOAuth2Strategy.prototype.authenticate = function(req, options) {\n  options = options || {};\n  var self = this;\n\n  if (req.query && req.query.error) {\n    if (req.query.error == 'access_denied') {\n      return this.fail({ message: req.query.error_description });\n    } else {\n      return this.error(new AuthorizationError(req.query.error_description, req.query.error, req.query.error_uri));\n    }\n  }\n\n  var callbackURL = options.callbackURL || this._callbackURL;\n  if (callbackURL) {\n    var parsed = url.parse(callbackURL);\n    if (!parsed.protocol) {\n      // The callback URL is relative, resolve a fully qualified URL from the\n      // URL of the originating request.\n      callbackURL = url.resolve(utils.originalURL(req, { proxy: this._trustProxy }), callbackURL);\n    }\n  }\n  \n  var meta = {\n    authorizationURL: this._oauth2._authorizeUrl,\n    tokenURL: this._oauth2._accessTokenUrl,\n    clientID: this._oauth2._clientId\n  }\n\n  if (req.query && req.query.code) {\n    function loaded(err, ok, state) {\n      if (err) { return self.error(err); }\n      if (!ok) {\n        return self.fail(state, 403);\n      }\n  \n      var code = req.query.code;\n\n      var params = self.tokenParams(options);\n      params.grant_type = 'authorization_code';\n      if (callbackURL) { params.redirect_uri = callbackURL; }\n\n      self._oauth2.getOAuthAccessToken(code, params,\n        function(err, accessToken, refreshToken, params) {\n          if (err) { return self.error(self._createOAuthError('Failed to obtain access token', err)); }\n\n          self._loadUserProfile(accessToken, function(err, profile) {\n            if (err) { return self.error(err); }\n\n            function verified(err, user, info) {\n              if (err) { return self.error(err); }\n              if (!user) { return self.fail(info); }\n              \n              info = info || {};\n              if (state) { info.state = state; }\n              self.success(user, info);\n            }\n\n            try {\n              if (self._passReqToCallback) {\n                var arity = self._verify.length;\n                if (arity == 6) {\n                  self._verify(req, accessToken, refreshToken, params, profile, verified);\n                } else { // arity == 5\n                  self._verify(req, accessToken, refreshToken, profile, verified);\n                }\n              } else {\n                var arity = self._verify.length;\n                if (arity == 5) {\n                  self._verify(accessToken, refreshToken, params, profile, verified);\n                } else { // arity == 4\n                  self._verify(accessToken, refreshToken, profile, verified);\n                }\n              }\n            } catch (ex) {\n              return self.error(ex);\n            }\n          });\n        }\n      );\n    }\n    \n    var state = req.query.state;\n    try {\n      var arity = this._stateStore.verify.length;\n      if (arity == 4) {\n        this._stateStore.verify(req, state, meta, loaded);\n      } else { // arity == 3\n        this._stateStore.verify(req, state, loaded);\n      }\n    } catch (ex) {\n      return this.error(ex);\n    }\n  } else {\n    var params = this.authorizationParams(options);\n    params.response_type = 'code';\n    if (callbackURL) { params.redirect_uri = callbackURL; }\n    var scope = options.scope || this._scope;\n    if (scope) {\n      if (Array.isArray(scope)) { scope = scope.join(this._scopeSeparator); }\n      params.scope = scope;\n    }\n\n    var state = options.state;\n    if (state) {\n      params.state = state;\n      \n      var parsed = url.parse(this._oauth2._authorizeUrl, true);\n      utils.merge(parsed.query, params);\n      parsed.query['client_id'] = this._oauth2._clientId;\n      delete parsed.search;\n      var location = url.format(parsed);\n      this.redirect(location);\n    } else {\n      function stored(err, state) {\n        if (err) { return self.error(err); }\n\n        if (state) { params.state = state; }\n        var parsed = url.parse(self._oauth2._authorizeUrl, true);\n        utils.merge(parsed.query, params);\n        parsed.query['client_id'] = self._oauth2._clientId;\n        delete parsed.search;\n        var location = url.format(parsed);\n        self.redirect(location);\n      }\n      \n      try {\n        var arity = this._stateStore.store.length;\n        if (arity == 3) {\n          this._stateStore.store(req, meta, stored);\n        } else { // arity == 2\n          this._stateStore.store(req, stored);\n        }\n      } catch (ex) {\n        return this.error(ex);\n      }\n    }\n  }\n};\n\n/**\n * Retrieve user profile from service provider.\n *\n * OAuth 2.0-based authentication strategies can overrride this function in\n * order to load the user's profile from the service provider.  This assists\n * applications (and users of those applications) in the initial registration\n * process by automatically submitting required information.\n *\n * @param {String} accessToken\n * @param {Function} done\n * @api protected\n */\nOAuth2Strategy.prototype.userProfile = function(accessToken, done) {\n  return done(null, {});\n};\n\n/**\n * Return extra parameters to be included in the authorization request.\n *\n * Some OAuth 2.0 providers allow additional, non-standard parameters to be\n * included when requesting authorization.  Since these parameters are not\n * standardized by the OAuth 2.0 specification, OAuth 2.0-based authentication\n * strategies can overrride this function in order to populate these parameters\n * as required by the provider.\n *\n * @param {Object} options\n * @return {Object}\n * @api protected\n */\nOAuth2Strategy.prototype.authorizationParams = function(options) {\n  return {};\n};\n\n/**\n * Return extra parameters to be included in the token request.\n *\n * Some OAuth 2.0 providers allow additional, non-standard parameters to be\n * included when requesting an access token.  Since these parameters are not\n * standardized by the OAuth 2.0 specification, OAuth 2.0-based authentication\n * strategies can overrride this function in order to populate these parameters\n * as required by the provider.\n *\n * @return {Object}\n * @api protected\n */\nOAuth2Strategy.prototype.tokenParams = function(options) {\n  return {};\n};\n\n/**\n * Parse error response from OAuth 2.0 endpoint.\n *\n * OAuth 2.0-based authentication strategies can overrride this function in\n * order to parse error responses received from the token endpoint, allowing the\n * most informative message to be displayed.\n *\n * If this function is not overridden, the body will be parsed in accordance\n * with RFC 6749, section 5.2.\n *\n * @param {String} body\n * @param {Number} status\n * @return {Error}\n * @api protected\n */\nOAuth2Strategy.prototype.parseErrorResponse = function(body, status) {\n  var json = JSON.parse(body);\n  if (json.error) {\n    return new TokenError(json.error_description, json.error, json.error_uri);\n  }\n  return null;\n};\n\n/**\n * Load user profile, contingent upon options.\n *\n * @param {String} accessToken\n * @param {Function} done\n * @api private\n */\nOAuth2Strategy.prototype._loadUserProfile = function(accessToken, done) {\n  var self = this;\n\n  function loadIt() {\n    return self.userProfile(accessToken, done);\n  }\n  function skipIt() {\n    return done(null);\n  }\n\n  if (typeof this._skipUserProfile == 'function' && this._skipUserProfile.length > 1) {\n    // async\n    this._skipUserProfile(accessToken, function(err, skip) {\n      if (err) { return done(err); }\n      if (!skip) { return loadIt(); }\n      return skipIt();\n    });\n  } else {\n    var skip = (typeof this._skipUserProfile == 'function') ? this._skipUserProfile() : this._skipUserProfile;\n    if (!skip) { return loadIt(); }\n    return skipIt();\n  }\n};\n\n/**\n * Create an OAuth error.\n *\n * @param {String} message\n * @param {Object|Error} err\n * @api private\n */\nOAuth2Strategy.prototype._createOAuthError = function(message, err) {\n  var e;\n  if (err.statusCode && err.data) {\n    try {\n      e = this.parseErrorResponse(err.data, err.statusCode);\n    } catch (_) {}\n  }\n  if (!e) { e = new InternalOAuthError(message, err); }\n  return e;\n};\n\n\n// Expose constructor.\nmodule.exports = OAuth2Strategy;\n","/home/travis/build/npmtest/node-npmtest-passport-oauth2/node_modules/passport-oauth2/lib/utils.js":"exports.merge = require('utils-merge');\n\n/**\n * Reconstructs the original URL of the request.\n *\n * This function builds a URL that corresponds the original URL requested by the\n * client, including the protocol (http or https) and host.\n *\n * If the request passed through any proxies that terminate SSL, the\n * `X-Forwarded-Proto` header is used to detect if the request was encrypted to\n * the proxy, assuming that the proxy has been flagged as trusted.\n *\n * @param {http.IncomingMessage} req\n * @param {Object} [options]\n * @return {String}\n * @api private\n */\nexports.originalURL = function(req, options) {\n  options = options || {};\n  var app = req.app;\n  if (app && app.get && app.get('trust proxy')) {\n    options.proxy = true;\n  }\n  var trustProxy = options.proxy;\n  \n  var proto = (req.headers['x-forwarded-proto'] || '').toLowerCase()\n    , tls = req.connection.encrypted || (trustProxy && 'https' == proto.split(/\\s*,\\s*/)[0])\n    , host = (trustProxy && req.headers['x-forwarded-host']) || req.headers.host\n    , protocol = tls ? 'https' : 'http'\n    , path = req.url || '';\n  return protocol + '://' + host + path;\n};\n","/home/travis/build/npmtest/node-npmtest-passport-oauth2/node_modules/passport-oauth2/lib/state/null.js":"function NullStore(options) {\n}\n\nNullStore.prototype.store = function(req, cb) {\n  cb();\n}\n\nNullStore.prototype.verify = function(req, providedState, cb) {\n  cb(null, true);\n}\n\n\nmodule.exports = NullStore;\n","/home/travis/build/npmtest/node-npmtest-passport-oauth2/node_modules/passport-oauth2/lib/state/session.js":"var uid = require('uid2');\n\n/**\n * Creates an instance of `SessionStore`.\n *\n * This is the state store implementation for the OAuth2Strategy used when\n * the `state` option is enabled.  It generates a random state and stores it in\n * `req.session` and verifies it when the service provider redirects the user\n * back to the application.\n *\n * This state store requires session support.  If no session exists, an error\n * will be thrown.\n *\n * Options:\n *\n *   - `key`  The key in the session under which to store the state\n *\n * @constructor\n * @param {Object} options\n * @api public\n */\nfunction SessionStore(options) {\n  if (!options.key) { throw new TypeError('Session-based state store requires a session key'); }\n  this._key = options.key;\n}\n\n/**\n * Store request state.\n *\n * This implementation simply generates a random string and stores the value in\n * the session, where it will be used for verification when the user is\n * redirected back to the application.\n *\n * @param {Object} req\n * @param {Function} callback\n * @api protected\n */\nSessionStore.prototype.store = function(req, callback) {\n  if (!req.session) { return callback(new Error('OAuth 2.0 authentication requires session support when using state. Did you forget to use express-session middleware?')); }\n\n  var key = this._key;\n  var state = uid(24);\n  if (!req.session[key]) { req.session[key] = {}; }\n  req.session[key].state = state;\n  callback(null, state);\n};\n\n/**\n * Verify request state.\n *\n * This implementation simply compares the state parameter in the request to the\n * value generated earlier and stored in the session.\n *\n * @param {Object} req\n * @param {String} providedState\n * @param {Function} callback\n * @api protected\n */\nSessionStore.prototype.verify = function(req, providedState, callback) {\n  if (!req.session) { return callback(new Error('OAuth 2.0 authentication requires session support when using state. Did you forget to use express-session middleware?')); }\n\n  var key = this._key;\n  if (!req.session[key]) {\n   return callback(null, false, { message: 'Unable to verify authorization request state.' });\n  }\n\n  var state = req.session[key].state;\n  if (!state) {\n   return callback(null, false, { message: 'Unable to verify authorization request state.' });\n  }\n\n  delete req.session[key].state;\n  if (Object.keys(req.session[key]).length === 0) {\n   delete req.session[key];\n  }\n\n  if (state !== providedState) {\n   return callback(null, false, { message: 'Invalid authorization request state.' });\n  }\n\n  return callback(null, true);\n};\n\n// Expose constructor.\nmodule.exports = SessionStore;\n","/home/travis/build/npmtest/node-npmtest-passport-oauth2/node_modules/passport-oauth2/lib/errors/authorizationerror.js":"/**\n * `AuthorizationError` error.\n *\n * AuthorizationError represents an error in response to an authorization\n * request.  For details, refer to RFC 6749, section 4.1.2.1.\n *\n * References:\n *   - [The OAuth 2.0 Authorization Framework](http://tools.ietf.org/html/rfc6749)\n *\n * @constructor\n * @param {String} [message]\n * @param {String} [code]\n * @param {String} [uri]\n * @param {Number} [status]\n * @api public\n */\nfunction AuthorizationError(message, code, uri, status) {\n  if (!status) {\n    switch (code) {\n      case 'access_denied': status = 403; break;\n      case 'server_error': status = 502; break;\n      case 'temporarily_unavailable': status = 503; break;\n    }\n  }\n\n  Error.call(this);\n  Error.captureStackTrace(this, this.constructor);\n  this.name = this.constructor.name;\n  this.message = message;\n  this.code = code || 'server_error';\n  this.uri = uri;\n  this.status = status || 500;\n}\n\n/**\n * Inherit from `Error`.\n */\nAuthorizationError.prototype.__proto__ = Error.prototype;\n\n\n/**\n * Expose `AuthorizationError`.\n */\nmodule.exports = AuthorizationError;\n","/home/travis/build/npmtest/node-npmtest-passport-oauth2/node_modules/passport-oauth2/lib/errors/tokenerror.js":"/**\n * `TokenError` error.\n *\n * TokenError represents an error received from a token endpoint.  For details,\n * refer to RFC 6749, section 5.2.\n *\n * References:\n *   - [The OAuth 2.0 Authorization Framework](http://tools.ietf.org/html/rfc6749)\n *\n * @constructor\n * @param {String} [message]\n * @param {String} [code]\n * @param {String} [uri]\n * @param {Number} [status]\n * @api public\n */\nfunction TokenError(message, code, uri, status) {\n  Error.call(this);\n  Error.captureStackTrace(this, this.constructor);\n  this.name = this.constructor.name;\n  this.message = message;\n  this.code = code || 'invalid_request';\n  this.uri = uri;\n  this.status = status || 500;\n}\n\n/**\n * Inherit from `Error`.\n */\nTokenError.prototype.__proto__ = Error.prototype;\n\n\n/**\n * Expose `TokenError`.\n */\nmodule.exports = TokenError;\n","/home/travis/build/npmtest/node-npmtest-passport-oauth2/node_modules/passport-oauth2/lib/errors/internaloautherror.js":"/**\n * `InternalOAuthError` error.\n *\n * InternalOAuthError wraps errors generated by node-oauth.  By wrapping these\n * objects, error messages can be formatted in a manner that aids in debugging\n * OAuth issues.\n *\n * @constructor\n * @param {String} [message]\n * @param {Object|Error} [err]\n * @api public\n */\nfunction InternalOAuthError(message, err) {\n  Error.call(this);\n  Error.captureStackTrace(this, this.constructor);\n  this.name = this.constructor.name;\n  this.message = message;\n  this.oauthError = err;\n}\n\n/**\n * Inherit from `Error`.\n */\nInternalOAuthError.prototype.__proto__ = Error.prototype;\n\n/**\n * Returns a string representing the error.\n *\n * @return {String}\n * @api public\n */\nInternalOAuthError.prototype.toString = function() {\n  var m = this.name;\n  if (this.message) { m += ': ' + this.message; }\n  if (this.oauthError) {\n    if (this.oauthError instanceof Error) {\n      m = this.oauthError.toString();\n    } else if (this.oauthError.statusCode && this.oauthError.data) {\n      m += ' (status: ' + this.oauthError.statusCode + ' data: ' + this.oauthError.data + ')';\n    }\n  }\n  return m;\n};\n\n\n/**\n * Expose `InternalOAuthError`.\n */\nmodule.exports = InternalOAuthError;\n"}